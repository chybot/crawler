# -*- coding: utf-8 -*-# Created by fml on 2016/5/18.import sysimport osimport timeimport reimport urllibimport datetimereload(sys)sys.path.append('./util')from CrawlerBase import CrawlerBasefrom lxml import etreefrom ModuleManager import Module,Event,Iterator,Sleepfrom util.crawler_util import CrawlerRunMode, InputType, OutputType, EventType, OutputParameterShowUpTypefrom CommonLib.WebContent import WebAccessType, SeedAccessTypeclass CrawlerJiangsu(CrawlerBase):    def __init__(self,pinyin, callbackFromOuterControl):        config_dict = dict()        config_dict[CrawlerRunMode.COMPANY_KEY] = [self.initHomePage,self.initYzmPic,self.initCheckCode,self.initSereachList,self.initCompanyInfo]        config_dict[CrawlerRunMode.COMPANY_URL] = [self.initTopinfo,self.initVistInfo,self.initVistGdxx,self.initVistBaxx,self.intVistBgxx,self.initVistFzjg,self.ininVistXzcf]        check_dict = dict()        check_dict['html_check_dict'] = {'过于频繁': WebAccessType.TOO_OFTEN, '非正常访问': WebAccessType.ACCESS_VIOLATION}        CrawlerBase.__init__(self, pinyin, config_dict, check_dict, callbackFromOuterControl)    def initHomePage(self):        module = Module(self.visitHomePage, "访问首页")        module.module_id = "home_page"        module.appendUrl('http://www.jsgsj.gov.cn:58888/province/')        module.appendHeaders({            "Host": "www.jsgsj.gov.cn:58888",            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",            "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",            "Accept-Encoding": "gzip, deflate",            "Connection": "keep-alive"        })        module.addSleep(Sleep(6))        module.appendOutput("pic_flag", ".//*[@id='updateVerifyCode1']/img/@src",OutputType.LIST)        self.module_manager.appendSubModule(module,supportDefaultEvent=True)    def initYzmPic(self):        module = Module(self.visitValidateCode,'获取验证码图片')        module.appendUrl(lambda pic_flag:u"http://www.jsgsj.gov.cn:58888" + pic_flag[0] +"&tmp=" + urllib.quote(datetime.datetime.now().strftime('%a %b %d %X GMT 0800').encode("UTF-8")))        module.appendHeaders({            "Host": "www.jsgsj.gov.cn:58888",            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",            "Accept": "image/png,image/*;q=0.8,*/*;q=0.5",            "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",            "Accept-Encoding": "gzip, deflate",            "Referer": "http://www.jsgsj.gov.cn:58888/province/",            "Connection": "keep-alive"        })        module.addSleep(Sleep(6))        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=0,redo_module='home_page'))        self.module_manager.appendSubModule(module)    def initCheckCode(self):        module = Module(self.getJson,'验证验证码')        module.appendUrl('http://www.jsgsj.gov.cn:58888/province/infoQueryServlet.json?checkCode=true')        module.appendHeaders({            "Host": "www.jsgsj.gov.cn:58888",            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",            "Accept": "application/json, text/javascript, */*; q=0.01",            "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",            "Accept-Encoding": "gzip, deflate",            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",            "X-Requested-With": "XMLHttpRequest",            "Referer": "http://www.jsgsj.gov.cn:58888/province/",            "Connection": "keep-alive",            "Pragma": "no-cache",            "Cache-Control": "no-cache"        })        module.appendWebMethod('post')        module.appendPostData(lambda yzm:{'verifyCode':yzm})        module.addSleep(Sleep(6))        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=0,redo_module='home_page'))        def postDataJsonAssert(json=None):            if not json:                return False            if json['bean'].has_key('mark'):                self.holder.logging.info("验证码错误")                module.addSleep(Sleep(5))                return False            tips = json['bean'].get('tips','')            if u'限制其访问' in tips:                data_str = re.search(r"\d{4}-\d{2}-\d{2}", tips)                if data_str:                    tim = data_str.group(0) + " 23:59:59"                    tim = int(time.mktime(time.strptime(tim, '%Y-%m-%d %H:%M:%S'))) - int(time.time())                else:                    tim = 3600 * 24                self.downloader.insertBlack(tim)                return False            return True        module.addEvent(            Event(EventType.ASSERT_FAILED, assert_function=postDataJsonAssert, redo_module="home_page"))        self.module_manager.appendSubModule(module)    def initSereachList(self):        module = Module(self.getJson,'获取公司Json列表')        module.appendUrl('http://www.jsgsj.gov.cn:58888/province/infoQueryServlet.json?queryCinfo=true')        module.appendHeaders({            "Host": "www.jsgsj.gov.cn:58888",            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",            "Accept": "application/json, text/javascript, */*; q=0.01",            "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",            "Accept-Encoding": "gzip, deflate",            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",            "X-Requested-With": "XMLHttpRequest",            "Referer": "http://www.jsgsj.gov.cn:58888/province/queryResultList.jsp",            "Connection": "keep-alive",            "Pragma": "no-cache",            "Cache-Control": "no-cache"        })        module.appendWebMethod('post')        module.appendPostData(lambda yzm,company_key:{"verifyCode":yzm,"name":company_key})        module.addSleep(Sleep(6))        def postDataJsonAssert(json = None):            if json == None:                return False            json = json[0]            if json['TIPS'] == '':                return True            module.addSleep(Sleep(5))            if u"验证码填写错误" in json['TIPS']:                return False            else:                data_str = re.search(r"\d{4}-\d{2}-\d{2}", json["TIPS"])                if data_str:                    tim = data_str.group(0) + " 23:59:59"                    tim = int(time.mktime(time.strptime(tim, '%Y-%m-%d %H:%M:%S'))) - int(time.time())                else:                    tim = 3600*24                self.downloader.insertBlack(tim)                return False        def getSearchList(json = None):            json = json[0]            info = json['INFO']            if len(info)==0 and u'没有符合查询条件的结果' in json[u'COUNT']:                self.report.access_type = SeedAccessType.NON_COMPANY                return []            else:                if info == '':                    return []                tree = etree.HTML(info)                dts = tree.xpath('.//dt')                return dts        def postDataJsonAssert1(search_list=None):            if not search_list:                self.report.access_type = SeedAccessType.NON_COMPANY                self.holder.logging.info("无此公司！")                return False            return True        module.appendOutput("search_list", type=OutputType.FUNCTION, function=getSearchList)        module.addEvent(Event(EventType.ASSERT_FAILED,assert_function=postDataJsonAssert, redo_module="home_page"))        module.addEvent(Event(EventType.ASSERT_FAILED, retry_times=0, assert_function=postDataJsonAssert1 ))        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=0,redo_module='home_page'))        self.module_manager.appendSubModule(module)    def initCompanyInfo(self):        iterator = Iterator("search_list", "company")        module = Module(None, "获取公司信息", iterator)        self.module_manager.appendSubModule(module, True)        self.initCompanyInfoPrepare(module)        self.initTopinfo(module)        self.initVistInfo(module)        self.initVistGdxx(module)        self.initVistBaxx(module)        self.intVistBgxx(module)        self.initVistFzjg(module)        self.ininVistXzcf(module)        self.initGdxqPages(module)        self.initNianbbao(module)        self.initNbiter(module)        self.initResultCollect(module)    def initCompanyInfoPrepare(self,super_module):        module = Module(None, "抓取公司前的预处理")        module.addSleep(Sleep(2))        def prepare(company):            query_ = dict()            base_info_list = company.xpath('.//a/@onclick')            if not base_info_list:                return query_            base_info = base_info_list[0].strip()            base_info = re.search(r"queryInfor\((.*?)\)", base_info, re.S).group(1).replace("'",'')            prams = base_info.split(",")            if len(prams) < 5:                return query_            query_["company_url"] = 'http://www.jsgsj.gov.cn:58888'+prams[0]            query_['prams'] = {'corp_org':int(prams[1]),                               'corp_id':int(prams[2]),                                'corp_seq_id':int(prams[3])}            query_['reg_no']= prams[4]            query_["search_company"] = company.xpath('.//text()')[0].strip()            query_['zch'] = prams[4]            uri = prams[0]            if "inner_ci" in uri:                company_type = "ci"            elif "inner_cb" in uri:                company_type = "cb"            elif "outer_fieib" in uri:                company_type = "fieib"            elif "outer_fiei" in uri:                company_type = "fiei"            elif "gtgsh" in uri:                company_type = "gtgsh"            elif "inner_nccci" in uri:                company_type = "nccci"            elif "inner_pb" in uri:                company_type = "pb"            elif "inner_pspc" in uri:                company_type = "pspc"            elif "pfc" in uri:                company_type = "pfc"            else:                return False            query_['company_type'] = company_type            return query_        def searchNocompany(company):            if not company.xpath('.//a/@onclick'):                self.report.access_type = SeedAccessType.NO_VALID_COMPANY                return False            return True        module.appendOutput(type=OutputType.FUNCTION, function=prepare)        module.addEvent(Event(EventType.ASSERT_FAILED, assert_function=searchNocompany))        super_module.appendSubModule(module, True)    def initTopinfo(self,super_module):        module = Module(self.visitTopInfoJson,'抓取页面TOP信息')        module.addSleep(Sleep(2))        module.appendUrl('http://www.jsgsj.gov.cn:58888/ecipplatform/commonServlet.json?commonEnter=true')        module.appendHeaders(lambda company_url:{"Host": "www.jsgsj.gov.cn:58888",                                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                                "Accept": "application/json, text/javascript, */*; q=0.01",                                "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                                "Accept-Encoding": "gzip, deflate",                                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                                "X-Requested-With": "XMLHttpRequest",                                "Referer": company_url,                                "Connection": "keep-alive",                                "Pragma": "no-cache",                                "Cache-Control": "no-cache"        })        module.appendWebMethod('post')        module.appendInput(InputType.FUNCTION, lambda prams:prams.update({"showRecordLine":0,                                                        "specificQuery":"commonQuery",                                                        "propertiesName":"corpInfor"}))        module.appendPostData("prams")        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module,True)    def initVistInfo(self,super_module):        module = Module(self.visitJbxxJson,'获取基本信息')        module.addSleep(Sleep(2))        def company_jbxx_url(company_type):            if company_type == "ci":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/ciServlet.json?ciEnter=true"            elif company_type == "cb":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/cbServlet.json?cbEnter=true"            elif company_type == "fieib":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/OuterFieibGSQueryServlet.json?fieibQYJBXX=true"            elif company_type == "fiei":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/fieiServlet.json?fieiQYJBXX=true"            elif company_type == "gtgsh":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/gtgshServlet.json?gtgshEnter=true"            elif company_type == "nccci":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/nccciServlet.json?nccciEnter=true"            elif company_type == "pb":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/pbServlet.json?pbEnter=true"            elif company_type == "pspc":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/pspcServlet.json?pspcEnter=true"            elif company_type == "pfc":                return "http://www.jsgsj.gov.cn:58888/ecipplatform/pfcServlet.json?pfcEnter=true"        module.appendUrl(company_jbxx_url)        module.appendHeaders(lambda company_url:{"Host": "www.jsgsj.gov.cn:58888",                            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                            "Accept": "application/json, text/javascript, */*; q=0.01",                            "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                            "Accept-Encoding": "gzip, deflate",                            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                            "X-Requested-With": "XMLHttpRequest",                            "Referer": company_url,                            "Connection": "keep-alive",                            "Pragma": "no-cache",                            "Cache-Control": "no-cache"})        module.appendWebMethod('post')        def jbxxData(company_type,prams):            ti=time.strftime("%a %b %d %Y %H:%M:%S GMT +800",time.localtime())            data = {}            corp_org = prams['corp_org']            corp_id = prams['corp_id']            corp_seq_id = prams['corp_seq_id']            if company_type == "ci":                data={"specificQuery": "basicInfo","org": corp_org,"id": corp_id,"seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "cb":                data={"specificQuery": "basicInfo","org": corp_org,"id": corp_id,"seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "fiei":                data={"org": corp_org,"id": corp_id,"seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "fieib":                data={"org": corp_org,"id": corp_id,"seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "gtgsh":                data={"specificQuery": "basicInfo","corp_org": corp_org,"corp_id": corp_id,"corp_seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "nccci":                data={"specificQuery": "basicInfo","corp_org": corp_org,"corp_id": corp_id,"corp_seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "pb":                data={"specificQuery": "basicInfo","org": corp_org,"id": corp_id,"seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "pspc":                data={"specificQuery": "basicInfo","corp_org": corp_org,"corp_id": corp_id,"corp_seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            elif company_type == "pfc":                data={"specificQuery": "basicInfo","corp_org": corp_org,"corp_id": corp_id,"corp_seq_id": corp_seq_id,"tmp": urllib.quote(ti.encode("UTF-8"))}            return data        module.appendPostData(lambda company_type,prams:jbxxData(company_type,prams))        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module)    def setRowKey(self, map_dict=None):        _dict = {}        _dict['company_name'] = self.value_dict['search_company']        _dict['company_zch'] = self.value_dict['zch']        self.page_dict['rowkey_dict'] = _dict        return True    def initVistGdxx(self,super_module):        module = Module(self.visitGdxxJson,'获取股东信息')        module.addSleep(Sleep(2))        def company_gdxx_url(company_type):            url = None            if company_type == "ci":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/ciServlet.json?ciEnter=true"            elif company_type == "cb":                url = None            elif company_type == "fiei":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/fieiServlet.json?fieibTZR=true"            elif company_type == "fieib":                url = None            elif company_type == "gtgsh":                url = None            elif company_type == "nccci":                url = None            elif company_type == "pb":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/pbServlet.json?pbEnter=true"            elif company_type == "pspc":                url = None            return url        module.appendUrl(company_gdxx_url)        module.appendHeaders(lambda company_url:{"Host": "www.jsgsj.gov.cn:58888",                            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                            "Accept": "application/json, text/javascript, */*; q=0.01",                            "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                            "Accept-Encoding": "gzip, deflate",                            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                            "X-Requested-With": "XMLHttpRequest",                            "Referer": company_url,                            "Connection": "keep-alive",                            "Pragma": "no-cache",                            "Cache-Control": "no-cache"})        module.appendWebMethod('post')        def company_gdxx_data(company_type, prams):            corp_org = prams['corp_org']            corp_id = prams['corp_id']            corp_seq_id = prams['corp_seq_id']            pageNo = 1            pageSize = 200            data = None            if company_type == "ci":                data = {"CORP_ORG": corp_org, "CORP_ID": corp_id, "CORP_SEQ_ID": corp_seq_id,                        "specificQuery": "investmentInfor", "showRecordLine": 1, "pageNo": pageNo, "pageSize": pageSize}            elif company_type == "cb":                data = None            elif company_type == "fiei":                ti = time.strftime(u"%a %b %d %Y %H:%M:%S GMT +800", time.localtime())                data = {"org": corp_org, "id": corp_id, "seq_id": corp_seq_id, "tmp": urllib.quote(ti.encode("UTF-8")),                        "pageNo": pageNo, "pageSize": pageSize}            elif company_type == "fieib":                data = None            elif company_type == "gtgsh":                data = None            elif company_type == "nccci":                data = None            elif company_type == "pb":                data = {"CORP_ORG": corp_org, "CORP_ID": corp_id, "CORP_SEQ_ID": corp_seq_id,                        "specificQuery": "investmentInfor", "showRecordLine": 1, "pageNo": pageNo, "pageSize": pageSize}            elif company_type == "pspc":                data = None            return data        module.appendPostData(company_gdxx_data)        def gdxqList(json):            if not json or 'items' not in json:                return None            return json['items']        module.appendOutput(name="gdxq_list", type=OutputType.FUNCTION, function=gdxqList)        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module)    def initGdxqPages(self, super_module):        iterator = Iterator(seeds="gdxq_list", param_name="gdxq")        module = Module(None, "进入股东详情", iterator)        super_module.appendSubModule(module, True)        self.initVistGdxq(module)    def initVistGdxq(self,super_module):        module = Module(self.visitGdxqJson, '获取股东详情')        def company_gdxx_detail_url(company_type):            url = None            if company_type == "ci":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/ciServlet.json?ciDetail=true"            elif company_type == "cb":                url = None            elif company_type == "fiei":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/fieiServlet.json?investorInfor=true"            elif company_type == "fieib":                url = None            elif company_type == "gtgsh":                url = None            elif company_type == "nccci":                url = None            elif company_type == "pb":                url = None            return url        module.appendUrl(company_gdxx_detail_url)        module.appendHeaders(lambda company_url: {"Host": "www.jsgsj.gov.cn:58888",                                                  "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                                                  "Accept": "application/json, text/javascript, */*; q=0.01",                                                  "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                                                  "Accept-Encoding": "gzip, deflate",                                                  "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                                                  "X-Requested-With": "XMLHttpRequest",                                                  "Referer": company_url,                                                  "Connection": "keep-alive",                                                  "Pragma": "no-cache",                                                  "Cache-Control": "no-cache"})        module.appendWebMethod('post')        def company_gdxx_detail_data(company_type,gdxq,reg_no):            corp_org = gdxq["CORP_ORG"]            corp_id = gdxq["CORP_ID"]            org = gdxq['C5']            id = gdxq['C6']            seq_id = gdxq['C7'],            data = None            if company_type == "ci":                data = {"CORP_ORG": corp_org, "CORP_ID": corp_id, "ORG": org, "ID": id, "SEQ_ID": seq_id,                        "REG_NO": reg_no, "specificQuery": "investorInfor"}            elif company_type == "cb":                data = None            elif company_type == "fiei":                data = {"CORP_ORG": corp_org, "CORP_ID": corp_id, "ORG": org, "ID": id, "SEQ_ID": seq_id,                        "REG_NO": reg_no, "specificQuery": "investorInfor"}            elif company_type == "fieib":                data = None            elif company_type == "gtgsh":                data = None            elif company_type == "nccci":                data = None            elif company_type == "pb":                data = None            return data        module.appendPostData(company_gdxx_detail_data)        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module)    def initVistBaxx(self,super_module):        module = Module(self.visitBaxxJson,'获取备案信息')        module.addSleep(Sleep(2))        def company_baxx_url(company_type):            url = None            if company_type == "ci":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/ciServlet.json?ciEnter=true"            elif company_type == "cb":                url = None            elif company_type == "fiei":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/fieiServlet.json?fieiZYRY=true"            elif company_type == "fieib":                url = None            elif company_type == "gtgsh":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/gtgshServlet.json?gtgshEnter=true"            elif company_type == "nccci":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/nccciServlet.json?nccciEnter=true"            elif company_type == "pb":                url = None            return url        module.appendUrl(company_baxx_url)        module.appendHeaders(lambda company_url:{"Host": "www.jsgsj.gov.cn:58888",                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                        "Accept": "application/json, text/javascript, */*; q=0.01",                        "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                        "Accept-Encoding": "gzip, deflate",                        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                        "X-Requested-With": "XMLHttpRequest",                        "Referer": company_url,                        "Connection": "keep-alive",                        "Pragma": "no-cache",                        "Cache-Control": "no-cache"})        module.appendWebMethod('post')        def company_baxx_data(company_type,prams):            corp_org = prams['corp_org']            corp_id = prams['corp_id']            corp_seq_id = prams['corp_seq_id']            pageNo = 1            pageSize = 200            data = None            ti = time.strftime(u"%a %b %d %Y %H:%M:%S GMT +800", time.localtime())            if company_type == "ci":                data = {"CORP_ORG": corp_org, "CORP_ID": corp_id, "CORP_SEQ_ID": corp_seq_id,                        "specificQuery": "personnelInformation", "showRecordLine": 1, "pageNo": pageNo,                        "pageSize": pageSize}            elif company_type == "cb":                data = None            elif company_type == "fiei":                data = {"org": corp_org, "id": corp_id, "seq_id": corp_seq_id,                        "tmp": urllib.quote(ti.encode("UTF-8")), "pageNo": pageNo, "pageSize": pageSize}            elif company_type == "fieib":                data = None            elif company_type == "gtgsh":                data = {"corp_org": corp_org, "corp_id": corp_id, "corp_seq_id": corp_seq_id,                        "specificQuery": "promoterInformation", "showRecordLine": 1,                        "tmp": urllib.quote(ti.encode("UTF-8")), "pageNo": pageNo, "pageSize": pageSize}            elif company_type == "nccci":                data = {"corp_org": corp_org, "corp_id": corp_id, "corp_seq_id": corp_seq_id,                        "specificQuery": "promoterInformation", "showRecordLine": 1,                        "tmp": urllib.quote(ti.encode("UTF-8")), "pageNo": pageNo, "pageSize": pageSize}            elif company_type == "pb":                data = None            return data        module.appendPostData(company_baxx_data)        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module)    def intVistBgxx(self,super_module):        module = Module(self.visitBgxxJson, '获取变更信息')        module.addSleep(Sleep(2))        module.appendUrl('http://www.jsgsj.gov.cn:58888/ecipplatform/commonServlet.json?commonEnter=true')        module.appendHeaders(lambda company_url:{"Host": "www.jsgsj.gov.cn:58888",                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                        "Accept": "application/json, text/javascript, */*; q=0.01",                        "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                        "Accept-Encoding": "gzip, deflate",                        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                        "X-Requested-With": "XMLHttpRequest",                        "Referer": company_url,                        "Connection": "keep-alive",                        "Pragma": "no-cache",                        "Cache-Control": "no-cache"})        module.appendWebMethod('post')        def company_bgxx_data(prams):            corp_org = prams['corp_org']            corp_id = prams['corp_id']            corp_seq_id = prams['corp_seq_id']            pageNo = 1            pageSize = 100            ti = time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime())            data = {                "showRecordLine": 1,                "specificQuery": "commonQuery",                "propertiesName": "biangeng",                "corp_org": corp_org,                "corp_id": corp_id,                "corp_seq_id": corp_seq_id,                "tmp": urllib.quote(ti.encode("UTF-8")),                'pageNo': pageNo,                'pageSize': pageSize            }            return data        module.appendPostData(company_bgxx_data)        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module)    def initVistFzjg(self,super_module):        module = Module(self.visitFzjgJson, '获取分支机构信息')        module.addSleep(Sleep(2))        def company_fzjg_url(company_type):            url = None            if company_type == "ci":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/ciServlet.json?ciEnter=true"            elif company_type == "cb":                url = None            elif company_type == "fiei":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/fieiServlet.json?fieiFGS=true"            elif company_type == "fieib":                url = None            elif company_type == "gtgsh":                url = None            elif company_type == "nccci":                url = None            elif company_type == "pb":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/ciServlet.json?ciEnter=true"            elif company_type == "pspc":                url = "http://www.jsgsj.gov.cn:58888/ecipplatform/pspcServlet.json?pspcEnter=true"            return url        module.appendUrl(company_fzjg_url)        module.appendHeaders(lambda company_url:{"Host": "www.jsgsj.gov.cn:58888",                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                        "Accept": "application/json, text/javascript, */*; q=0.01",                        "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                        "Accept-Encoding": "gzip, deflate",                        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                        "X-Requested-With": "XMLHttpRequest",                        "Referer": company_url,                        "Connection": "keep-alive",                        "Pragma": "no-cache",                        "Cache-Control": "no-cache"})        module.appendWebMethod('post')        def company_fzjg_data(company_type, prams):            corp_org = prams['corp_org']            corp_id = prams['corp_id']            corp_seq_id = prams['corp_seq_id']            pageNo = 1            pageSize = 200            data = None            if company_type == "ci":                data = {"CORP_ORG": corp_org, "CORP_ID": corp_id, "CORP_SEQ_ID": corp_seq_id,                        "specificQuery": "branchOfficeInfor", "showRecordLine": 1, "pageNo": pageNo,                        "pageSize": pageSize}            elif company_type == "cb":                data = None            elif company_type == "fiei":                ti = time.strftime(u"%a %b %d %Y %H:%M:%S GMT +800", time.localtime())                data = {"org": corp_org, "id": corp_id, "seq_id": corp_seq_id,                        "tmp": urllib.quote(ti.encode("UTF-8")), "pageNo": pageNo, "pageSize": pageSize}            elif company_type == "fieib":                data = None            elif company_type == "gtgsh":                data = None            elif company_type == "nccci":                data = None            elif company_type == "pb":                data = {"CORP_ORG": corp_org, "CORP_ID": corp_id, "CORP_SEQ_ID": corp_seq_id,                        "specificQuery": "branchOfficeInfor", "showRecordLine": 1, "pageNo": pageNo,                        "pageSize": pageSize}            elif company_type == "pspc":                data = {"corp_org": corp_org, "corp_id": corp_id, "corp_seq_id": corp_seq_id,                        "specificQuery": "branchOfficeInfor", "showRecordLine": 1, "pageNo": pageNo,                        "pageSize": pageSize}            return data        module.appendPostData(company_fzjg_data)        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module)    def ininVistXzcf(self,super_module):        module = Module(self.visitXzcfJson, '获取行政处罚信息')        module.addSleep(Sleep(2))        module.appendUrl('http://www.jsgsj.gov.cn:58888/ecipplatform/commonServlet.json?commonEnter=true')        module.appendHeaders(lambda company_url:{"Host": "www.jsgsj.gov.cn:58888",                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",                        "Accept": "application/json, text/javascript, */*; q=0.01",                        "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",                        "Accept-Encoding": "gzip, deflate",                        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                        "X-Requested-With": "XMLHttpRequest",                        "Referer": company_url,                        "Connection": "keep-alive",                        "Pragma": "no-cache",                        "Cache-Control": "no-cache"})        module.appendWebMethod('post')        def company_xzcf_data(prams):            corp_org = prams['corp_org']            corp_id = prams['corp_id']            corp_seq_id = prams['corp_seq_id']            pageNo = 1            pageSize = 100            ti = time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime())            data = {                "showRecordLine": 1,                "specificQuery": "commonQuery",                "propertiesName": "chufa",                "corp_org": corp_org,                "corp_id": corp_id,                "corp_seq_id": corp_seq_id,                "tmp": urllib.quote(ti.encode("UTF-8")),                'pageNo': pageNo,                'pageSize': pageSize            }            return data        module.appendPostData(company_xzcf_data)        module.addEvent(Event(EventType.EXCEPTION_OCCURED, retry_times=2))        super_module.appendSubModule(module)    def initNianbbao(self,module_super):        module = Module(self.getJson, '获取公司年报信息列表')        module.addSleep(Sleep(2))        module.appendUrl('http://www.jsgsj.gov.cn:58888/ecipplatform/nbServlet.json?nbEnter=true')        module.appendHeaders(lambda company_url: {'Host': 'www.jsgsj.gov.cn:58888',                                                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',                                                    'Accept': 'application/json, text/javascript, */*; q=0.01',                                                    'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',                                                    'Accept-Encoding': 'gzip, deflate',                                                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',                                                    'X-Requested-With': 'XMLHttpRequest',                                                    'Referer': company_url,                                                    'Connection': 'keep-alive',                                                    'Pragma': 'no-cache',                                                    'Cache-Control': 'no-cache'})        module.appendWebMethod('post')        module.appendPostData(lambda reg_no:{'REG_NO':reg_no,                                                'showRecordLine':0,                                                'specificQuery':'gs_pb',                                                'propertiesName':'query_report_list',                                                'tmp':time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime())})        def jsons(json):            if not json:                return []            return [(x.get('ID'),x.get('REPORT_RESULT')) for x in json if 'ID' in x and 'REPORT_RESULT' in x ]        module.appendOutput(name='qynb_list', type=OutputType.FUNCTION, function=jsons,                            show_up=OutputParameterShowUpType.OPTIONAL)        module_super.appendSubModule(module)    def prepareAnnalsParms(self, module_super):        module = Module(None, u"抓取年报-预处理")        # 准备后续模块需要的必要参数        def prepare(nianb):            mv_dict = dict()            mv_dict['nb_id'] = nianb[0]            mv_dict['nb_name'] = re.search(ur'\d*', nianb[1]).group()            return mv_dict        module.appendOutput(type=OutputType.FUNCTION, function=prepare)        module_super.appendSubModule(module, True)    def initNbiter(self, module_super):        iterator = Iterator("qynb_list", "nianb")        module = Module(None, u"获取公司年报", iterator)        module_super.appendSubModule(module, True)        self.prepareAnnalsParms(module)        self.initNbbasicinfo(module)        self.initNbquery_setRed(module)        self.initNbquery_websiteInfo(module)        self.initNbquery_investInfo(module)        self.initNbquery_stockInfo(module)        self.initNbquery_InformationSecurity(module)        self.initNbquery_RevisionRecord(module)    def initNbbasicinfo(self, module_super):        module = Module(self.visitQynbJson, u"获取年报基本信息详情")        module.appendUrl('http://www.jsgsj.gov.cn:58888/ecipplatform/nbServlet.json?nbEnter=true')        module.appendHeaders(lambda company_url: {'Host': 'www.jsgsj.gov.cn:58888',                                                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',                                                  'Accept': 'application/json, text/javascript, */*; q=0.01',                                                  'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',                                                  'Accept-Encoding': 'gzip, deflate',                                                  'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',                                                  'X-Requested-With': 'XMLHttpRequest',                                                  'Referer': company_url,                                                  'Connection': 'keep-alive',                                                  'Pragma': 'no-cache',                                                  'Cache-Control': 'no-cache'})        module.appendWebMethod('post')        module.appendPostData(lambda nb_id: {'ID':nb_id,                                                'OPERATE_TYPE':2,                                                'showRecordLine':0,                                                'specificQuery':'gs_pb',                                                'propertiesName':'query_basicInfo',                                             'tmp': time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime())})        module_super.appendSubModule(module)    def initNbquery_setRed(self,module_super):        module = Module(self.visitQynbJson, u"获取年报3")        module.appendUrl('http://www.jsgsj.gov.cn:58888/ecipplatform/nbServlet.json?nbEnter=true')        module.appendHeaders(lambda company_url: {'Host': 'www.jsgsj.gov.cn:58888',                                                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',                                                  'Accept': 'application/json, text/javascript, */*; q=0.01',                                                  'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',                                                  'Accept-Encoding': 'gzip, deflate',                                                  'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',                                                  'X-Requested-With': 'XMLHttpRequest',                                                  'Referer': company_url,                                                  'Connection': 'keep-alive',                                                  'Pragma': 'no-cache',                                                  'Cache-Control': 'no-cache'})        module.appendWebMethod('post')        module.appendPostData(lambda nb_name,reg_no: {'REPORT_YEAR':nb_name,                                                'REG_NO':reg_no,                                                'showRecordLine':0,                                                'specificQuery':'gs_pb',                                                'propertiesName':'query_setRed',                                                'tmp': time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime())})        module_super.appendSubModule(module)    def initNbquery_websiteInfo(self,module_super):        data_fun = lambda nb_name,nb_id:{'REPORT_YEAR':nb_name,                                            'ID':nb_id,                                            'showRecordLine':1,                                            'specificQuery':'gs_pb',                                            'propertiesName':'query_websiteInfo',                                            'temp':time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime()),                                            'pageNo':1,                                            'pageSize':200,}        self.modules(module_super,u'获取年报网站或网店信息',data_fun)    def initNbquery_investInfo(self,module_super):        data_fun = lambda nb_name, nb_id: {'REPORT_YEAR': nb_name,                                           'ID': nb_id,                                           'showRecordLine': 1,                                           'specificQuery': 'gs_pb',                                           'propertiesName': 'query_EquityTransfer',                                           'temp': time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime()),                                           'pageNo': 1,                                           'pageSize': 200}        self.modules(module_super, u'获取年报股权变更信息', data_fun)    def initNbquery_stockInfo(self,module_super):        data_fun = lambda nb_id:{'MAIN_ID':nb_id,                                'OPERATE_TYPE':1,                                'TYPE':'NZGS',                                'showRecordLine':1,                                'specificQuery':'gs_pb',                                'propertiesName':'query_stockInfo',                                'ID':nb_id,                                'ADMIT_MAIN':'08',                                'temp':time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime()),                                'pageNo':1,                                'pageSize':200}        self.modules(module_super, u'获取年报股东（发起人）及出资信息', data_fun)    def initNbquery_InformationSecurity(self,module_super):        data_fun = lambda nb_name,nb_id:{'REPORT_YEAR':nb_name,                                            'ID':nb_id,                                            'showRecordLine':1,                                            'specificQuery':'gs_pb',                                            'propertiesName':'query_InformationSecurity',                                            'temp':time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime()),                                            'pageNo':1,                                            'pageSize':200}        self.modules(module_super, u'获取年报7', data_fun)    def initNbquery_RevisionRecord(self,module_super):        data_fun = lambda nb_name,reg_no:{'REPORT_YEAR':nb_name,                                            'REG_NO':reg_no,                                            'showRecordLine':1,                                            'specificQuery':'gs_pb',                                            'propertiesName':'query_RevisionRecord',                                            'temp':time.strftime("%a %b %d %Y %H:%M:%S GMT +800", time.localtime()),                                            'pageNo':1,                                            'pageSize':200}        self.modules(module_super, u'获取年报8', data_fun)    def initResultCollect(self, module_super):        module = Module(self.resultCollect, "结果收集")        module_super.appendSubModule(module)    def modules(self,module_super,module_name,data_fun):        module = Module(self.visitQynbJson, module_name)        module.appendUrl('http://www.jsgsj.gov.cn:58888/ecipplatform/nbServlet.json?nbEnter=true')        module.appendHeaders(lambda company_url: {'Host': 'www.jsgsj.gov.cn:58888',                                                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',                                                  'Accept': 'application/json, text/javascript, */*; q=0.01',                                                  'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',                                                  'Accept-Encoding': 'gzip, deflate',                                                  'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',                                                  'X-Requested-With': 'XMLHttpRequest',                                                  'Referer': company_url,                                                  'Connection': 'keep-alive',                                                  'Pragma': 'no-cache',                                                  'Cache-Control': 'no-cache'})        module.appendWebMethod('post')        module.appendPostData(data_fun)        module_super.appendSubModule(module)